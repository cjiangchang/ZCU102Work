// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "gmem"
#define AUTOTB_TVIN_gmem  "../tv/cdatafile/c.ddr_hls_test.autotvin_gmem.dat"
#define AUTOTB_TVOUT_gmem  "../tv/cdatafile/c.ddr_hls_test.autotvout_gmem.dat"
// wrapc file define: "start_signal"
#define AUTOTB_TVIN_start_signal  "../tv/cdatafile/c.ddr_hls_test.autotvin_start_signal.dat"
#define AUTOTB_TVOUT_start_signal  "../tv/cdatafile/c.ddr_hls_test.autotvout_start_signal.dat"
// wrapc file define: "hls_check"
#define AUTOTB_TVOUT_hls_check  "../tv/cdatafile/c.ddr_hls_test.autotvout_hls_check.dat"
// wrapc file define: "num"
#define AUTOTB_TVIN_num  "../tv/cdatafile/c.ddr_hls_test.autotvin_num.dat"
// wrapc file define: "saMaster"
#define AUTOTB_TVIN_saMaster  "../tv/cdatafile/c.ddr_hls_test.autotvin_saMaster.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "gmem"
#define AUTOTB_TVOUT_PC_gmem  "../tv/rtldatafile/rtl.ddr_hls_test.autotvout_gmem.dat"
// tvout file define: "start_signal"
#define AUTOTB_TVOUT_PC_start_signal  "../tv/rtldatafile/rtl.ddr_hls_test.autotvout_start_signal.dat"
// tvout file define: "hls_check"
#define AUTOTB_TVOUT_PC_hls_check  "../tv/rtldatafile/rtl.ddr_hls_test.autotvout_hls_check.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			gmem_depth = 0;
			start_signal_depth = 0;
			hls_check_depth = 0;
			num_depth = 0;
			saMaster_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{gmem " << gmem_depth << "}\n";
			total_list << "{start_signal " << start_signal_depth << "}\n";
			total_list << "{hls_check " << hls_check_depth << "}\n";
			total_list << "{num " << num_depth << "}\n";
			total_list << "{saMaster " << saMaster_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int gmem_depth;
		int start_signal_depth;
		int hls_check_depth;
		int num_depth;
		int saMaster_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void ddr_hls_test (
volatile int* start_signal,
volatile int* hls_check,
volatile int* num,
long long unsigned int* saMaster);

void AESL_WRAP_ddr_hls_test (
volatile int* start_signal,
volatile int* hls_check,
volatile int* num,
long long unsigned int* saMaster)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "gmem"
		aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); // data

			sc_bv<64> *gmem_pc_buffer = new sc_bv<64>[10240];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'gmem', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'gmem', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					gmem_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_gmem))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: gmem
				{
					// bitslice(63, 0)
					// {
						// celement: saMaster(63, 0)
						// {
							sc_lv<64>* saMaster_lv0_0_10239_1 = new sc_lv<64>[10240];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: saMaster(63, 0)
						{
							// carray: (0) => (10239) @ (1)
							for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
							{
								if (&(saMaster[0]) != NULL) // check the null address if the c port is array or others
								{
									saMaster_lv0_0_10239_1[hls_map_index].range(63, 0) = sc_bv<64>(gmem_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: saMaster(63, 0)
						{
							// carray: (0) => (10239) @ (1)
							for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : saMaster[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : saMaster[0]
								// output_left_conversion : saMaster[i_0]
								// output_type_conversion : (saMaster_lv0_0_10239_1[hls_map_index]).to_uint64()
								if (&(saMaster[0]) != NULL) // check the null address if the c port is array or others
								{
									saMaster[i_0] = (saMaster_lv0_0_10239_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] gmem_pc_buffer;
		}

		// output port post check: "start_signal"
		aesl_fh.read(AUTOTB_TVOUT_PC_start_signal, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_start_signal, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_start_signal, AESL_token); // data

			sc_bv<32> *start_signal_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'start_signal', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'start_signal', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					start_signal_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_start_signal, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_start_signal))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: start_signal
				{
					// bitslice(31, 0)
					// {
						// celement: start_signal(31, 0)
						// {
							sc_lv<32>* start_signal_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: start_signal(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(start_signal[0]) != NULL) // check the null address if the c port is array or others
								{
									start_signal_lv0_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(start_signal_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: start_signal(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : start_signal[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : start_signal[0]
								// output_left_conversion : start_signal[i_0]
								// output_type_conversion : (start_signal_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(start_signal[0]) != NULL) // check the null address if the c port is array or others
								{
									start_signal[i_0] = (start_signal_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] start_signal_pc_buffer;
		}

		// output port post check: "hls_check"
		aesl_fh.read(AUTOTB_TVOUT_PC_hls_check, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_hls_check, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_hls_check, AESL_token); // data

			sc_bv<32> *hls_check_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hls_check', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hls_check', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					hls_check_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_hls_check, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_hls_check))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: hls_check
				{
					// bitslice(31, 0)
					// {
						// celement: hls_check(31, 0)
						// {
							sc_lv<32>* hls_check_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: hls_check(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(hls_check[0]) != NULL) // check the null address if the c port is array or others
								{
									hls_check_lv0_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(hls_check_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: hls_check(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : hls_check[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : hls_check[0]
								// output_left_conversion : hls_check[i_0]
								// output_type_conversion : (hls_check_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(hls_check[0]) != NULL) // check the null address if the c port is array or others
								{
									hls_check[i_0] = (hls_check_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] hls_check_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "gmem"
		char* tvin_gmem = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_gmem);
		char* tvout_gmem = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_gmem);

		// "start_signal"
		char* tvin_start_signal = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_start_signal);
		char* tvout_start_signal = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_start_signal);

		// "hls_check"
		char* tvout_hls_check = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_hls_check);

		// "num"
		char* tvin_num = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_num);

		// "saMaster"
		char* tvin_saMaster = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_saMaster);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_gmem, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

		sc_bv<64>* gmem_tvin_wrapc_buffer = new sc_bv<64>[10240];

		// RTL Name: gmem
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: saMaster(63, 0)
				{
					// carray: (0) => (10239) @ (1)
					for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : saMaster[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : saMaster[0]
						// regulate_c_name       : saMaster
						// input_type_conversion : saMaster[i_0]
						if (&(saMaster[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> saMaster_tmp_mem;
							saMaster_tmp_mem = saMaster[i_0];
							gmem_tvin_wrapc_buffer[hls_map_index].range(63, 0) = saMaster_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10240; i++)
		{
			sprintf(tvin_gmem, "%s\n", (gmem_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);
		}

		tcl_file.set_num(10240, &tcl_file.gmem_depth);
		sprintf(tvin_gmem, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

		// release memory allocation
		delete [] gmem_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_start_signal, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_start_signal, tvin_start_signal);

		sc_bv<32>* start_signal_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: start_signal
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: start_signal(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : start_signal[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : start_signal[0]
						// regulate_c_name       : start_signal
						// input_type_conversion : start_signal[i_0]
						if (&(start_signal[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> start_signal_tmp_mem;
							start_signal_tmp_mem = start_signal[i_0];
							start_signal_tvin_wrapc_buffer[hls_map_index].range(31, 0) = start_signal_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_start_signal, "%s\n", (start_signal_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_start_signal, tvin_start_signal);
		}

		tcl_file.set_num(1, &tcl_file.start_signal_depth);
		sprintf(tvin_start_signal, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_start_signal, tvin_start_signal);

		// release memory allocation
		delete [] start_signal_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_num, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_num, tvin_num);

		sc_bv<32>* num_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: num
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: num(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : num[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : num[0]
						// regulate_c_name       : num
						// input_type_conversion : num[i_0]
						if (&(num[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> num_tmp_mem;
							num_tmp_mem = num[i_0];
							num_tvin_wrapc_buffer[hls_map_index].range(31, 0) = num_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_num, "%s\n", (num_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_num, tvin_num);
		}

		tcl_file.set_num(1, &tcl_file.num_depth);
		sprintf(tvin_num, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_num, tvin_num);

		// release memory allocation
		delete [] num_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_saMaster, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_saMaster, tvin_saMaster);

		sc_bv<32> saMaster_tvin_wrapc_buffer;

		// RTL Name: saMaster
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_saMaster, "%s\n", (saMaster_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_saMaster, tvin_saMaster);
		}

		tcl_file.set_num(1, &tcl_file.saMaster_depth);
		sprintf(tvin_saMaster, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_saMaster, tvin_saMaster);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		ddr_hls_test(start_signal, hls_check, num, saMaster);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_gmem, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

		sc_bv<64>* gmem_tvout_wrapc_buffer = new sc_bv<64>[10240];

		// RTL Name: gmem
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: saMaster(63, 0)
				{
					// carray: (0) => (10239) @ (1)
					for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : saMaster[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : saMaster[0]
						// regulate_c_name       : saMaster
						// input_type_conversion : saMaster[i_0]
						if (&(saMaster[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> saMaster_tmp_mem;
							saMaster_tmp_mem = saMaster[i_0];
							gmem_tvout_wrapc_buffer[hls_map_index].range(63, 0) = saMaster_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10240; i++)
		{
			sprintf(tvout_gmem, "%s\n", (gmem_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);
		}

		tcl_file.set_num(10240, &tcl_file.gmem_depth);
		sprintf(tvout_gmem, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

		// release memory allocation
		delete [] gmem_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_start_signal, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_start_signal, tvout_start_signal);

		sc_bv<32>* start_signal_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: start_signal
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: start_signal(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : start_signal[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : start_signal[0]
						// regulate_c_name       : start_signal
						// input_type_conversion : start_signal[i_0]
						if (&(start_signal[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> start_signal_tmp_mem;
							start_signal_tmp_mem = start_signal[i_0];
							start_signal_tvout_wrapc_buffer[hls_map_index].range(31, 0) = start_signal_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_start_signal, "%s\n", (start_signal_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_start_signal, tvout_start_signal);
		}

		tcl_file.set_num(1, &tcl_file.start_signal_depth);
		sprintf(tvout_start_signal, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_start_signal, tvout_start_signal);

		// release memory allocation
		delete [] start_signal_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_hls_check, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_hls_check, tvout_hls_check);

		sc_bv<32>* hls_check_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: hls_check
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: hls_check(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : hls_check[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : hls_check[0]
						// regulate_c_name       : hls_check
						// input_type_conversion : hls_check[i_0]
						if (&(hls_check[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> hls_check_tmp_mem;
							hls_check_tmp_mem = hls_check[i_0];
							hls_check_tvout_wrapc_buffer[hls_map_index].range(31, 0) = hls_check_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_hls_check, "%s\n", (hls_check_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_hls_check, tvout_hls_check);
		}

		tcl_file.set_num(1, &tcl_file.hls_check_depth);
		sprintf(tvout_hls_check, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_hls_check, tvout_hls_check);

		// release memory allocation
		delete [] hls_check_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "gmem"
		delete [] tvin_gmem;
		delete [] tvout_gmem;
		// release memory allocation: "start_signal"
		delete [] tvin_start_signal;
		delete [] tvout_start_signal;
		// release memory allocation: "hls_check"
		delete [] tvout_hls_check;
		// release memory allocation: "num"
		delete [] tvin_num;
		// release memory allocation: "saMaster"
		delete [] tvin_saMaster;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

